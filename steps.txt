-->COMMIT 01
- Start nest app (nest new project_name)
- Enter project directory (cd project_name)
- Delete app.controller.ts app.service.ts app.controller.spec.ts
- Now create the module (nest g module books)
- Create books.controllers.ts and books.service.ts
- Make the books.json in src/data directory
- Install the npm i fs-extra
- Added some code in the nest.cli file
- Update the Get and Post request codes in the books.controllers


-->COMMIT 02
- Made the changes in the nest-cli.json to include the .json extension files
- Installed class-validator and class-transformer
- Create DTO for book validation
- Make changes in the main.ts file
- Made service based logic
- Made the changes in the controllers
- Test the API

-->COMMIT 03
- Create a DTO for query processing
- Write the Query() for issued books 
- Write the logic in the controller

-->COMMIT 04
- Added cors in main.ts to help the API hit while integrating

-->COMMIT 05
- Update books.service to add a unique id

-->COMMIT 07
- Add HttpCode in book.controller


P0 : Find Journal in journal_copy and journal_table
P1 : Update Journal in journal_copy and journal_table
P2 : Delete Journal in journal_copy and journal_table


--------------------- JOURNALS ---------------------
- Create journals module (nest g module journals)
- Create journals controller (nest g controller journals)
- Create journals service (nest g service journals)
- Create journals_table.entity.ts where I created the journals_table
- Create journals_copy.entity.ts where I created the journals_copy
- Add these entities in the journals.module and the app.module
- Create the basic service and controller functions to be carried out (CRUD) for the journal table and copy

- Now for update journal route, we need to create the zod-validation 
- Then we need to specify the logic for it in services

- For find journal we have to give the zod validation first
- Then write the query validator for it
- Then you write the logic in services
- Then you write the route function in controller