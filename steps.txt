-->COMMIT 01
- Start nest app (nest new project_name)
- Enter project directory (cd project_name)
- Delete app.controller.ts app.service.ts app.controller.spec.ts
- Now create the module (nest g module books)
- Create books.controllers.ts and books.service.ts
- Make the books.json in src/data directory
- Install the npm i fs-extra
- Added some code in the nest.cli file
- Update the Get and Post request codes in the books.controllers


-->COMMIT 02
- Made the changes in the nest-cli.json to include the .json extension files
- Installed class-validator and class-transformer
- Create DTO for book validation
- Make changes in the main.ts file
- Made service based logic
- Made the changes in the controllers
- Test the API

-->COMMIT 03
- Create a DTO for query processing
- Write the Query() for issued books 
- Write the logic in the controller

-->COMMIT 04
- Added cors in main.ts to help the API hit while integrating

-->COMMIT 05
- Update books.service to add a unique id

-->COMMIT 07
- Add HttpCode in book.controller


P0 : Find Journal in journal_copy and journal_table
P1 : Update Journal in journal_copy and journal_table
P2 : Delete Journal in journal_copy and journal_table


--------------------- JOURNALS ---------------------
- Create journals module (nest g module journals)
- Create journals controller (nest g controller journals)
- Create journals service (nest g service journals)
- Create journals_table.entity.ts where I created the journals_table
- Create journals_copy.entity.ts where I created the journals_copy
- Add these entities in the journals.module and the app.module
- Create the basic service and controller functions to be carried out (CRUD) for the journal table and copy

- Now for update journal route, we need to create the zod-validation 
- Then we need to specify the logic for it in services

- For find journal we have to give the zod validation first
- Then write the query validator for it
- Then you write the logic in services
- Then you write the route function in controller


--> Enter data in both the tables
- 


------------- NOTIFICATIONS ----------------
- Create module, controller and services (nest g mo notifications, nest g constroller notifications, nest g s notifications OR nest g resources notifications)
- Install the dependencies to ensure scheduling (npm i --save @nestjs/schedule)
- Register the controller and services in the module
- Register the Schedule in the module to use it
- In services create a function and annotate it with @Cron decorator to indicate the function is used for task scheduling
-> Cron Job Standard Configs
(* * * * * *) => (seconds, minutes, hours, day_of_the_month, month, day_of_the_week) => (0-59, 0-59, 0-23, 1-31, 1-12, 1-7)
-> CronExpression gives us pre defined expressions
-> Intervals gives us teh freedom to give time intervals and not limit us to fixed time
** Time is defined in milliseconds **
** We can also schedule the timezone **



--> Give Notifications of :-

-- DATABASE BASED UPDATES --

1. Database Updates
  - Tell whether there are any updates or not
2. New Users Added Updates
  - Tell if new users are added or not
3. New Books or Periodicals Updates
  - Tell if new periodicals are added or not

-- REMINDER BASED UPDATES --

1. Reminder to borrowed books
  - Give the reminder to the users that they have to return the borrowed item while their borrowing period is over



--> Set Up Resend with NestJS
- Create Acc on Resend
- Install the dependencies [npm install resend]
- Add API key in env
- Implement the service 
- Implement the controller
- Test



----->> Things To Do Today
- Map data from the book_log and students_table table into the notifs part
- Work on Resend mail part with the given API key
- Complete transactions CRUD and implement the same in the jorunals_table

book_logs -> 
students_table -> master


P0 : Integration of Periodicals done
P1 : Refactored Journals Notifications



---------- For Date Conversion ----------
- differenceInBusinessDays : Doesnt count Saturday Sunday



--------------------- For Calendar -------------------------
- Created module controller and services